
import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/hooks/useAuth';
import { useToast } from '@/hooks/use-toast';
import type { Database } from '@/integrations/supabase/types';

type Technician = Database['public']['Tables']['technicians']['Row'];
type TechnicianInsert = Database['public']['Tables']['technicians']['Insert'];

export const useTechnicians = () => {
  const { user } = useAuth();
  const { toast } = useToast();
  const [technicians, setTechnicians] = useState<Technician[]>([]);
  const [loading, setLoading] = useState(true);

  const fetchTechnicians = async () => {
    if (!user) {
      console.log('‚ùå Usu√°rio n√£o autenticado - technicians');
      setLoading(false);
      return;
    }
    
    try {
      setLoading(true);
      console.log('üîç Buscando todos os t√©cnicos');
      
      const { data, error } = await supabase
        .from('technicians')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Erro Supabase ao buscar t√©cnicos:', error);
        throw error;
      }
      
      console.log('‚úÖ T√©cnicos encontrados:', data?.length || 0);
      setTechnicians(data || []);
    } catch (error) {
      console.error('‚ùå Erro geral ao buscar t√©cnicos:', error);
      toast({
        title: "Erro",
        description: "Erro ao carregar t√©cnicos.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const createTechnician = async (technicianData: Omit<TechnicianInsert, 'user_id'>) => {
    if (!user) {
      console.error('‚ùå Usu√°rio n√£o autenticado para criar t√©cnico');
      toast({
        title: "Erro",
        description: "Usu√°rio n√£o autenticado.",
        variant: "destructive",
      });
      return { success: false, error: 'User not authenticated' };
    }

    try {
      console.log('üìù Criando t√©cnico:', technicianData);
      
      // Validar dados obrigat√≥rios
      if (!technicianData.name || technicianData.name.trim() === '') {
        throw new Error('Nome √© obrigat√≥rio');
      }
      if (!technicianData.email || technicianData.email.trim() === '') {
        throw new Error('Email √© obrigat√≥rio');
      }
      if (!technicianData.phone || technicianData.phone.trim() === '') {
        throw new Error('Telefone √© obrigat√≥rio');
      }
      if (!technicianData.cpf || technicianData.cpf.trim() === '') {
        throw new Error('CPF √© obrigat√≥rio');
      }
      if (!technicianData.level || technicianData.level.trim() === '') {
        throw new Error('N√≠vel √© obrigat√≥rio');
      }
      
      // Validar o n√≠vel antes de enviar
      const validLevels = ['J√∫nior', 'Pleno', 'S√™nior', 'Especialista'];
      if (!validLevels.includes(technicianData.level)) {
        throw new Error(`N√≠vel inv√°lido: ${technicianData.level}. Deve ser um dos: ${validLevels.join(', ')}`);
      }
      
      const { data, error } = await supabase
        .from('technicians')
        .insert({
          ...technicianData,
          user_id: user.id,
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erro Supabase ao criar t√©cnico:', error);
        throw error;
      }
      
      console.log('‚úÖ T√©cnico criado com sucesso:', data);
      await fetchTechnicians(); // Recarregar lista
      toast({
        title: "Sucesso!",
        description: "T√©cnico cadastrado com sucesso!",
      });
      return { success: true, data };
    } catch (error) {
      console.error('‚ùå Erro ao criar t√©cnico:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erro ao cadastrar t√©cnico';
      toast({
        title: "Erro",
        description: errorMessage,
        variant: "destructive",
      });
      return { success: false, error };
    }
  };

  const updateTechnician = async (id: string, technicianData: Partial<TechnicianInsert>) => {
    if (!user) {
      console.error('‚ùå Usu√°rio n√£o autenticado para atualizar t√©cnico');
      toast({
        title: "Erro",
        description: "Usu√°rio n√£o autenticado.",
        variant: "destructive",
      });
      return { success: false, error: 'User not authenticated' };
    }

    try {
      console.log('üìù Atualizando t√©cnico:', id, technicianData);
      
      // Validar o n√≠vel se estiver sendo atualizado
      if (technicianData.level) {
        const validLevels = ['J√∫nior', 'Pleno', 'S√™nior', 'Especialista'];
        if (!validLevels.includes(technicianData.level)) {
          throw new Error(`N√≠vel inv√°lido: ${technicianData.level}. Deve ser um dos: ${validLevels.join(', ')}`);
        }
      }
      
      const { data, error } = await supabase
        .from('technicians')
        .update(technicianData)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erro Supabase ao atualizar t√©cnico:', error);
        throw error;
      }
      
      console.log('‚úÖ T√©cnico atualizado com sucesso:', data);
      await fetchTechnicians(); // Recarregar lista
      toast({
        title: "Sucesso!",
        description: "T√©cnico atualizado com sucesso!",
      });
      return { success: true, data };
    } catch (error) {
      console.error('‚ùå Erro ao atualizar t√©cnico:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erro ao atualizar t√©cnico';
      toast({
        title: "Erro",
        description: errorMessage,
        variant: "destructive",
      });
      return { success: false, error };
    }
  };

  const deleteTechnician = async (id: string) => {
    if (!user) {
      console.error('‚ùå Usu√°rio n√£o autenticado para deletar t√©cnico');
      toast({
        title: "Erro",
        description: "Usu√°rio n√£o autenticado.",
        variant: "destructive",
      });
      return { success: false, error: 'User not authenticated' };
    }

    try {
      console.log('üóëÔ∏è Removendo t√©cnico:', id);
      
      const { error } = await supabase
        .from('technicians')
        .delete()
        .eq('id', id);

      if (error) {
        console.error('‚ùå Erro Supabase ao remover t√©cnico:', error);
        throw error;
      }
      
      console.log('‚úÖ T√©cnico removido com sucesso');
      await fetchTechnicians(); // Recarregar lista
      toast({
        title: "Sucesso!",
        description: "T√©cnico removido com sucesso!",
      });
      return { success: true };
    } catch (error) {
      console.error('‚ùå Erro ao remover t√©cnico:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erro ao remover t√©cnico';
      toast({
        title: "Erro",
        description: errorMessage,
        variant: "destructive",
      });
      return { success: false, error };
    }
  };

  useEffect(() => {
    fetchTechnicians();
  }, [user]);

  return {
    technicians,
    loading,
    createTechnician,
    updateTechnician,
    deleteTechnician,
    refetch: fetchTechnicians,
  };
};
